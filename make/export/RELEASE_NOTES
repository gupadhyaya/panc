RELEASE NOTES FOR PANINI 0.9.1

These release notes summarizes changes in Panini 0.9.1 release.
Note that feature releases and bug fixes are cumulative, that is, 
bug fixes in previous update versions are included in subsequent 
update versions.

** Programming language features included in this release

* Support for capsule initializers.
    capsule C ( D d1, ...) {
      BufferedReader reader;

      => {
        try {
    		reader = ... ;
    	} catch (IOException e) { ... }
      }

    }

* Support for foreach expression.  
      capsule C (Worker[] workers) {
	    void run(){
		 Number[] results = foreach(Worker w: workers) 
		                       w.compute();
        }
      }

* Support for separate compilation. This was one of the most 
  important feature that we have added in this release. It allows 
  capsule declaration and system declaration to be compiled 
  separately. The compiled capsule declaration/s must be in the 
  classpath when compiling the system declaration.

* Better support for sequential consistency analysis. This release
  includes a much better algorithm for sequential consistency 
  analysis that is more precise, modular, and faster compared to 
  our previous implementation. This algorithm discussed by the 
  following report is also the first in its class.
  
  Long et al. "Automatic Detection of Sequential Inconsistencies 
  in Actor-like Systems", Technical Report #13-08, Computer Science,
  Iowa State University, May 17, 2013.
      
** Bug Fixes and Minor Updates

* Compiler now gives proper version information.

* Several new examples were added and improved to illustrate 
  newly added language features.





RELEASE NOTES FOR PANINI 0.9.0

These release notes summarizes changes in Panini 0.9.0 release.
Note that bug fixes are cumulative, that is, bug fixes in previous 
update versions are included in subsequent update versions.

** Features included in this release

* Support for capsule declarations 
	capsule C ( D d1, ... ) {
    	t s; 
        ...
        void m ( ... ) {    …   }
    } 

* Support for system declarations 
	system S1 {
		C c1; D d1; … // Declaration of capsule instances in this system
        c1 ( d1 ) ;  // Wiring capsule instances together.
	}

* Support for signature declarations
	signature S {
		void m ( ... );
	}
	capsule D implement Signature S {
	 	void m ( ... ) {
	 		...
	 	}
	}

* Support for thread-based implementation of capsules.

* Support for sequential consistency at a capsule instance-level. 
  Capsule procedure calls to a single capsule instance are processed in 
  the order in which they are made. 

* Basic support for confinement violation detection, where the Panini 
  compiler warns users about potentially leaking references to the 
  internal states of the capsule instance.
  